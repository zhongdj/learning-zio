@startuml
package "domain" {
  interface DomainEvent #LightGreen
  interface DomainEventProcessor #LightGreen
  package "mgt" {
    class AnalysisProject #Orange
  }
  package "git" {
    class GitProject #LightGreen
    package "commit" #LightGreen {
      class GitCommit #LightGreen
      class GitCommitCreated #LightGreen implements DomainEvent
      interface GitCommitRepository #LightGreen
    }
    package "entry" {
      class EntryAdded #LightGreen implements DomainEvent
      class EntryDeleted #LightGreen implements DomainEvent
      class EntryMoved #LightGreen implements DomainEvent
      class CommitEntryOpProcessor #Orange implements DomainEventProcessor
      EntryAdded *-up- GitCommit
      EntryDeleted *-up- GitCommit
      EntryMoved *-up- GitCommit
    }
    package "contributor" {
     class CommitContributorProcessor #Turquoise implements DomainEventProcessor
     class Contributor #LightGreen
     class ProjectContributor #LightGreen
     interface ContributorRepository #Orange
     ContributorRepository .. Contributor: save >
     ContributorRepository .. ProjectContributor: save >
     ProjectContributor *- GitProject
     CommitContributorProcessor .. Contributor: generates
     CommitContributorProcessor .. ProjectContributor: generates
    }
  }
  AnalysisProject "1" *-up- "many" GitProject: contains >
  DomainEventProcessor "1" .left. "many" DomainEvent: consumes
  GitCommit *-- GitProject: belongs >
  CommitEntryOpProcessor .. EntryAdded: generates
  CommitEntryOpProcessor .. EntryDeleted: generates
  CommitEntryOpProcessor .. EntryMoved: generates
}

package "application.core" {
 class AnalysisProjectOwner<Actor> #Turquoise
 class AnalysisProjectWorker<Actor> #Turquoise
 class AnalysisTaskExecutor<Actor> #Turquoise
 interface AnalysisTask #Turquoise
 AnalysisProjectOwner "1" *-up- "many" AnalysisProjectWorker: dispatch git\nproject >
 AnalysisProjectWorker "1" -- "many" AnalysisTaskExecutor: Orchestrate Tasks into >
 AnalysisTask --up-- GitProject: analysis >
 AnalysisProjectOwner "1" -up- "1" AnalysisProject: Manage >
 AnalysisTaskExecutor "1" -- "1" AnalysisTask: completes >
}

package "application.task" {
 class GitCloneOrUpdateTask #Orange implements AnalysisTask
 class ReadCommitTask #Turquoise
 class CommitMessageAnalysisTask #Turquoise implements AnalysisTask
 class CommitContributorProcessor<Actor> implements DomainEventProcessor
 CommitContributorProcessor "1" .up. "many" GitCommitCreated: consumes >
 CommitContributorProcessor "0..1" .up. "1" AnalysisProject: within >
 CommitContributorProcessor "1" .up. "many" Contributor: generates >
 CommitContributorProcessor "1" .up. "many" ProjectContributor: generates >
 CommitContributorProcessor *-up- ContributorRepository: aggregates

 ReadCommitTask ..|> AnalysisTask
 GitCloneOrUpdateTask "1" o-up- "1" GitProject: clone/update >
 ReadCommitTask "1" .up. "many" GitCommit: read from\ngit db
 ReadCommitTask "many" o.up. "1" GitCommitRepository:  write commits to
 ReadCommitTask "1" .up. "many" GitCommitCreated: generates >
}

package "infrastructure" {
 class AnalysisProjectDelegate #Orange
 class MySQLGitCommitRepository #Turquoise
 class MySQLContributorRepository #Turquoise
 MySQLContributorRepository -..up..|> ContributorRepository
 MySQLGitCommitRepository -..up..|> GitCommitRepository
 AnalysisProjectDelegate "1" ..up.. "many" AnalysisProjectOwner: Create or Update >
}




@enduml

